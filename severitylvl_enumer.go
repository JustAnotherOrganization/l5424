// Code generated by "enumer -type SeverityLvl log.go"; DO NOT EDIT

package l5424

import (
	"fmt"
)

const _SeverityLvlName = "EmergencyLvlAlertLvlCritLvlErrorLvlWarnLvlNoticeLvlInfoLvlDebugLvl"

var _SeverityLvlIndex = [...]uint8{0, 12, 20, 27, 35, 42, 51, 58, 66}

func (i SeverityLvl) String() string {
	if i >= SeverityLvl(len(_SeverityLvlIndex)-1) {
		return fmt.Sprintf("SeverityLvl(%d)", i)
	}
	return _SeverityLvlName[_SeverityLvlIndex[i]:_SeverityLvlIndex[i+1]]
}

var _SeverityLvlValues = []SeverityLvl{0, 1, 2, 3, 4, 5, 6, 7}

var _SeverityLvlNameToValueMap = map[string]SeverityLvl{
	_SeverityLvlName[0:12]:  0,
	_SeverityLvlName[12:20]: 1,
	_SeverityLvlName[20:27]: 2,
	_SeverityLvlName[27:35]: 3,
	_SeverityLvlName[35:42]: 4,
	_SeverityLvlName[42:51]: 5,
	_SeverityLvlName[51:58]: 6,
	_SeverityLvlName[58:66]: 7,
}

// SeverityLvlString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SeverityLvlString(s string) (SeverityLvl, error) {
	if val, ok := _SeverityLvlNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SeverityLvl values", s)
}

// SeverityLvlValues returns all values of the enum
func SeverityLvlValues() []SeverityLvl {
	return _SeverityLvlValues
}

// IsASeverityLvl returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SeverityLvl) IsASeverityLvl() bool {
	for _, v := range _SeverityLvlValues {
		if i == v {
			return true
		}
	}
	return false
}
