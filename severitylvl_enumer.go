// Code generated by "enumer -type SeverityLvl log.go"; DO NOT EDIT

package l5424

import (
	"fmt"
)

const (
	_SeverityLvlName_0 = "EmergencyLvlAlertLvlCritLvlErrorLvlWarnLvlNoticeLvlInfoLvlDebugLvl"
	_SeverityLvlName_1 = "Disabled"
)

var (
	_SeverityLvlIndex_0 = [...]uint8{0, 12, 20, 27, 35, 42, 51, 58, 66}
	_SeverityLvlIndex_1 = [...]uint8{0, 8}
)

func (i SeverityLvl) String() string {
	switch {
	case 0 <= i && i <= 7:
		return _SeverityLvlName_0[_SeverityLvlIndex_0[i]:_SeverityLvlIndex_0[i+1]]
	case i == 1000:
		return _SeverityLvlName_1
	default:
		return fmt.Sprintf("SeverityLvl(%d)", i)
	}
}

var _SeverityLvlValues = []SeverityLvl{0, 1, 2, 3, 4, 5, 6, 7, 1000}

var _SeverityLvlNameToValueMap = map[string]SeverityLvl{
	_SeverityLvlName_0[0:12]:  0,
	_SeverityLvlName_0[12:20]: 1,
	_SeverityLvlName_0[20:27]: 2,
	_SeverityLvlName_0[27:35]: 3,
	_SeverityLvlName_0[35:42]: 4,
	_SeverityLvlName_0[42:51]: 5,
	_SeverityLvlName_0[51:58]: 6,
	_SeverityLvlName_0[58:66]: 7,
	_SeverityLvlName_1[0:8]:   1000,
}

// SeverityLvlString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SeverityLvlString(s string) (SeverityLvl, error) {
	if val, ok := _SeverityLvlNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SeverityLvl values", s)
}

// SeverityLvlValues returns all values of the enum
func SeverityLvlValues() []SeverityLvl {
	return _SeverityLvlValues
}

// IsASeverityLvl returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SeverityLvl) IsASeverityLvl() bool {
	for _, v := range _SeverityLvlValues {
		if i == v {
			return true
		}
	}
	return false
}
